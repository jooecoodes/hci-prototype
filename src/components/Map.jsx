import React, { useState, useEffect, useRef, useCallback } from "react";
import {
  MapContainer,
  TileLayer,
  Marker,
  Popup,
  Polyline,
  useMapEvents,
  useMap,
} from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import { ChevronDownIcon, XMarkIcon, MapPinIcon, ArrowPathIcon } from "@heroicons/react/24/outline";

// Fix Leaflet marker icons issue
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png",
  iconUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png",
  shadowUrl: "https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png",
});

// Create custom icons
const createCustomIcon = (color) => {
  return new L.Icon({
    iconUrl: `data:image/svg+xml;base64,${btoa(`
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32" height="32">
        <circle cx="16" cy="16" r="14" fill="${color}" stroke="white" stroke-width="2"/>
        <circle cx="16" cy="12" r="4" fill="white"/>
        <path d="M16,28 C10,20 10,20 16,12 C22,20 22,20 16,28 Z" fill="white"/>
      </svg>
    `)}`,
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  });
};

const originIcon = createCustomIcon("#3B82F6");
const destinationIcon = createCustomIcon("#EF4444");
const currentLocationIcon = createCustomIcon("#10B981");

// Route data with multiple routes
const jeepneyRoutes = [
  {
    name: "R1",
    color: "blue",
    coordinates: [
      [8.484665, 124.656636],
      [8.484851, 124.655751],
      [8.484929, 124.655412],
      [8.485046, 124.654917],
      [8.485172, 124.654325],
      [8.485830, 124.651227],
      [8.486099, 124.650136],
      [8.486187, 124.649662],
      [8.486237, 124.649511],
      [8.486191, 124.649367],
      [8.486532, 124.647793],
      [8.486714, 124.646982],
      [8.487057, 124.645708],
      [8.488537, 124.641061],
      [8.488953, 124.639791],
      [8.488901, 124.639653],
      [8.487166, 124.639042],
      [8.486091, 124.638788],
      [8.484747, 124.638449],
      [8.484585, 124.638597],
      [8.483255, 124.638495],
      [8.481772, 124.638288],
      [8.481061, 124.638133],
      [8.480555, 124.638027],
      [8.480094, 124.637951],
      [8.479126, 124.637864],
      [8.476614, 124.637845],
      [8.475949, 124.642334],
      [8.475583, 124.642571],
    ]
  },
  {
    name: "R2",
    color: "green",
    coordinates: [
      [8.480, 124.650],
      [8.479, 124.649],
      [8.478, 124.648],
      [8.477, 124.647],
      [8.476, 124.646],
      [8.475, 124.645],
      [8.474, 124.644],
      [8.474, 124.643],
      [8.474, 124.642],
      [8.474, 124.641],
      [8.474, 124.640],
      [8.475, 124.639],
      [8.476, 124.638],
      [8.477, 124.637],
      [8.478, 124.636],
      [8.479, 124.635],
      [8.480, 124.634],
      [8.481, 124.633],
      [8.482, 124.632],
      [8.483, 124.631],
    ]
  },
    {
    name: "WESTBOUND TERMINAL TO AGORA MARKET",
    color: "pink",
    coordinates: [[8.51213, 124.62424], [8.51196, 124.62425], [8.51187, 124.62426], [8.51166, 124.62427], [8.51089, 124.62431], [8.50851, 124.62435], [8.50777, 124.62437], [8.50659, 124.62449], [8.50656, 124.62449], [8.5064, 124.62451], [8.50606, 124.62453], [8.50539, 124.62452], [8.5049, 124.62448], [8.50455, 124.62444], [8.50457, 124.62428], [8.50458, 124.62421], [8.50458, 124.62416], [8.50459, 124.62402], [8.5046, 124.62386], [8.5046, 124.62362], [8.50455, 124.62194], [8.50454, 124.62145], [8.50453, 124.62112], [8.50451, 124.62076], [8.5045, 124.62052], [8.5045, 124.62024], [8.50449, 124.61998], [8.50449, 124.6199], [8.50448, 124.61981], [8.50448, 124.61956], [8.50447, 124.61942], [8.50446, 124.6192], [8.50445, 124.61897], [8.50444, 124.61882], [8.50442, 124.61823], [8.50441, 124.61804], [8.50438, 124.61796], [8.50437, 124.61775], [8.50436, 124.61761], [8.50436, 124.61734], [8.50434, 124.61695], [8.50434, 124.61644], [8.50434, 124.61638], [8.50432, 124.61589], [8.5043, 124.61558], [8.50429, 124.61531], [8.50429, 124.61526], [8.50428, 124.6149], [8.50428, 124.61483], [8.50427, 124.61442], [8.50425, 124.61367], [8.50422, 124.61298], [8.50421, 124.61275], [8.5042, 124.61232], [8.50417, 124.61184], [8.50416, 124.61169], [8.50408, 124.61084], [8.50407, 124.6107], [8.50398, 124.60961], [8.50398, 124.60958], [8.50394, 124.60911], [8.5039, 124.60855], [8.50387, 124.60827], [8.50385, 124.60802], [8.50384, 124.60797], [8.50383, 124.60777], [8.50379, 124.60735], [8.50391, 124.60734], [8.50392, 124.60747], [8.50381, 124.60747], [8.50371, 124.60748], [8.50372, 124.60767], [8.50373, 124.6077], [8.50373, 124.60772], [8.50374, 124.60773], [8.50375, 124.60774], [8.50376, 124.60775], [8.50383, 124.60777], [8.50384, 124.60797], [8.50385, 124.60802], [8.50387, 124.60827], [8.5039, 124.60855], [8.50394, 124.60911], [8.50398, 124.60958], [8.50398, 124.60961], [8.50407, 124.6107], [8.50408, 124.61084], [8.50416, 124.61169], [8.50417, 124.61184], [8.5042, 124.61232], [8.50421, 124.61275], [8.50422, 124.61298], [8.50425, 124.61367], [8.50427, 124.61442], [8.50428, 124.61483], [8.50428, 124.6149], [8.50429, 124.61526], [8.50429, 124.61531], [8.5043, 124.61558], [8.50432, 124.61589], [8.50434, 124.61638], [8.50434, 124.61644], [8.50434, 124.61695], [8.50436, 124.61734], [8.50436, 124.61761], [8.50437, 124.61775], [8.50438, 124.61796], [8.50435, 124.61805], [8.50434, 124.61809], [8.50434, 124.61822], [8.50435, 124.61871], [8.50435, 124.61924], [8.50436, 124.61946], [8.50437, 124.61964], [8.50437, 124.61989], [8.50438, 124.61999], [8.50439, 124.62034], [8.50439, 124.62064], [8.50442, 124.62132], [8.50443, 124.62212], [8.50446, 124.6227], [8.50448, 124.62372], [8.50448, 124.6238], [8.50448, 124.62406], [8.50447, 124.62428], [8.50445, 124.62435], [8.50444, 124.62443], [8.50436, 124.62476], [8.50432, 124.62494], [8.50427, 124.62507], [8.50417, 124.62529], [8.50407, 124.62552], [8.50392, 124.62579], [8.50375, 124.62603], [8.50364, 124.62618], [8.5035, 124.62633], [8.5033, 124.62652], [8.50297, 124.62678], [8.50269, 124.62697], [8.50212, 124.62728], [8.50131, 124.62772], [8.50031, 124.62828], [8.49798, 124.62953], [8.49683, 124.63016], [8.49663, 124.63027], [8.4958, 124.63073], [8.49559, 124.63085], [8.49488, 124.63123], [8.49448, 124.63144], [8.49385, 124.63179], [8.49352, 124.63197], [8.49309, 124.63222], [8.49296, 124.63229], [8.49293, 124.63231], [8.49265, 124.63247], [8.4925, 124.63256], [8.49243, 124.63262], [8.49238, 124.63265], [8.49222, 124.63277], [8.49187, 124.63305], [8.49185, 124.63307], [8.49183, 124.63309], [8.49166, 124.63324], [8.4915, 124.6334], [8.49134, 124.63358], [8.49124, 124.63371], [8.491, 124.63402], [8.49088, 124.63419], [8.49073, 124.63444], [8.49062, 124.63465], [8.49052, 124.63482], [8.49044, 124.635], [8.49038, 124.63513], [8.49032, 124.63529], [8.49023, 124.63552], [8.48979, 124.63693], [8.48941, 124.63805], [8.4891, 124.63906], [8.48891, 124.63965], [8.4889, 124.63985], [8.48868, 124.64056], [8.4886, 124.64083], [8.48842, 124.64139], [8.48831, 124.64176], [8.48825, 124.64196], [8.48822, 124.64202], [8.48812, 124.64238], [8.48796, 124.64291], [8.48792, 124.64302], [8.48789, 124.64309], [8.48787, 124.64317], [8.48743, 124.64454], [8.48737, 124.64471], [8.48732, 124.64488], [8.48719, 124.64528], [8.48703, 124.64578], [8.48688, 124.64624], [8.48678, 124.64665], [8.48674, 124.64685], [8.48671, 124.64697], [8.48669, 124.64708], [8.48655, 124.64766], [8.48644, 124.64818], [8.48641, 124.64829], [8.48639, 124.6484], [8.48618, 124.64936], [8.48614, 124.64959], [8.48612, 124.64968], [8.48608, 124.64983], [8.48603, 124.64986], [8.48589, 124.65048], [8.48573, 124.65119], [8.48552, 124.65212], [8.4855, 124.65224], [8.4852, 124.65363], [8.48516, 124.6538], [8.48502, 124.65449], [8.48491, 124.65504], [8.48489, 124.65512], [8.48487, 124.65522], [8.4848, 124.65556], [8.48476, 124.65575], [8.48461, 124.65641], [8.48457, 124.6566], [8.48449, 124.65695], [8.4842, 124.6569], [8.48412, 124.65689], [8.48405, 124.65689], [8.48399, 124.6569], [8.48392, 124.65691], [8.48387, 124.65692], [8.48385, 124.65693], [8.48376, 124.65698], [8.48366, 124.65705], [8.48332, 124.6573], [8.48321, 124.65738], [8.48318, 124.65739], [8.48313, 124.65742], [8.483, 124.65746], [8.48286, 124.65747], [8.48267, 124.65749], [8.48236, 124.6575], [8.48195, 124.65754], [8.4813, 124.65758], [8.48126, 124.65759], [8.48105, 124.6576], [8.48085, 124.6576], [8.4808, 124.65759], [8.48077, 124.65758], [8.48074, 124.65757], [8.48066, 124.65766], [8.48068, 124.65767], [8.4807, 124.65769], [8.48071, 124.6577], [8.48074, 124.65771], [8.48077, 124.65771], [8.4808, 124.65772], [8.48085, 124.65772], [8.48164, 124.65767], [8.48236, 124.65763], [8.48266, 124.65761], [8.48281, 124.65759], [8.48303, 124.65758], [8.48314, 124.65755], [8.48322, 124.65752], [8.48332, 124.65748], [8.48345, 124.65738], [8.48374, 124.65717], [8.48384, 124.65709], [8.4839, 124.65705], [8.48393, 124.65703], [8.48395, 124.65702], [8.48397, 124.65702], [8.484, 124.65702], [8.48402, 124.65702], [8.48407, 124.65702], [8.48418, 124.65703], [8.48446, 124.65707], [8.48432, 124.65768], [8.48425, 124.65799], [8.48415, 124.65847], [8.48423, 124.65849], [8.4845, 124.65857], [8.48472, 124.65864], [8.48477, 124.65866], [8.48527, 124.65881], [8.48592, 124.65901], [8.48653, 124.6592], [8.48693, 124.65931], [8.48764, 124.65952], [8.48856, 124.6598], [8.48877, 124.65986], [8.4888, 124.65977], [8.48913, 124.65887]],
  },
  {
    name: "AGORA MARKET TO WESTBOUND TERMINAL",
    color:"brown",
    coordinates: [[8.48916, 124.65879], [8.48933, 124.65835], [8.48949, 124.65786], [8.48955, 124.6577], [8.48835, 124.65731], [8.48814, 124.65794], [8.48806, 124.65819], [8.48764, 124.65952], [8.48693, 124.65931], [8.48653, 124.6592], [8.48592, 124.65901], [8.48527, 124.65881], [8.48477, 124.65866], [8.48472, 124.65864], [8.4845, 124.65857], [8.48423, 124.65849], [8.48434, 124.65801], [8.48441, 124.6577], [8.48455, 124.65709], [8.48458, 124.65697], [8.48466, 124.65662], [8.48469, 124.65642], [8.48485, 124.65577], [8.48489, 124.65558], [8.48496, 124.65524], [8.48498, 124.65514], [8.485, 124.65506], [8.48511, 124.65451], [8.48525, 124.65382], [8.48528, 124.65365], [8.48558, 124.65226], [8.48561, 124.65214], [8.48582, 124.65121], [8.48598, 124.6505], [8.48612, 124.64988], [8.48608, 124.64983], [8.48612, 124.64968], [8.48614, 124.64959], [8.48618, 124.64936], [8.48639, 124.6484], [8.48641, 124.64829], [8.48644, 124.64818], [8.48655, 124.64766], [8.48669, 124.64708], [8.48671, 124.64697], [8.48674, 124.64685], [8.48678, 124.64665], [8.48688, 124.64624], [8.48703, 124.64578], [8.48719, 124.64528], [8.48732, 124.64488], [8.48737, 124.64471], [8.48743, 124.64454], [8.48787, 124.64317], [8.48789, 124.64309], [8.48792, 124.64302], [8.48796, 124.64291], [8.48812, 124.64238], [8.48822, 124.64202], [8.48825, 124.64196], [8.48831, 124.64176], [8.48842, 124.64139], [8.4886, 124.64083], [8.48868, 124.64056], [8.4889, 124.63985], [8.48902, 124.6397], [8.48919, 124.63918], [8.4892, 124.63914], [8.48954, 124.63808], [8.4899, 124.63697], [8.49035, 124.63557], [8.49044, 124.6353], [8.49056, 124.63498], [8.49071, 124.63469], [8.49083, 124.63448], [8.49099, 124.63423], [8.4911, 124.63407], [8.4912, 124.63395], [8.49135, 124.63378], [8.49148, 124.6336], [8.49176, 124.63333], [8.49185, 124.63323], [8.4921, 124.63301], [8.49226, 124.63288], [8.49247, 124.63273], [8.49263, 124.63264], [8.49265, 124.63263], [8.4928, 124.63253], [8.49302, 124.6324], [8.49314, 124.63233], [8.49315, 124.63232], [8.4934, 124.63218], [8.49378, 124.63199], [8.494, 124.63187], [8.49429, 124.63171], [8.49462, 124.63153], [8.49495, 124.63135], [8.49532, 124.63115], [8.49568, 124.63097], [8.49586, 124.63087], [8.49603, 124.63078], [8.49637, 124.6306], [8.4967, 124.63041], [8.4969, 124.6303], [8.49708, 124.6302], [8.49747, 124.62998], [8.49761, 124.62991], [8.49804, 124.62966], [8.4982, 124.62956], [8.50036, 124.6284], [8.50219, 124.6274], [8.50256, 124.62718], [8.50294, 124.62695], [8.50327, 124.62671], [8.50344, 124.62657], [8.50368, 124.6263], [8.50381, 124.62616], [8.50405, 124.62579], [8.50418, 124.62559], [8.50424, 124.62547], [8.5043, 124.62533], [8.50437, 124.62516], [8.50443, 124.62498], [8.50448, 124.62482], [8.50451, 124.62469], [8.50452, 124.62465], [8.50455, 124.62444], [8.5049, 124.62448], [8.50539, 124.62452], [8.50606, 124.62453], [8.5064, 124.62451], [8.50656, 124.62449], [8.50659, 124.62449], [8.50777, 124.62437], [8.50851, 124.62435], [8.51089, 124.62431], [8.51166, 124.62427], [8.51187, 124.62426], [8.51196, 124.62425], [8.51232, 124.62423]],
  },
  {
    name: "Directions from FH58+9F, Cagayan de Oro, Misamis Oriental, Philippines to FJJP+3WJ, Ipil St, Cagayan de Oro, 9000 Misamis Oriental, Philippines",
    color: "yellow",
    coordinates: [[8.45966, 124.56601], [8.4597, 124.56605], [8.45982, 124.56615], [8.45998, 124.56629], [8.46005, 124.56635], [8.46032, 124.56658], [8.46039, 124.56664], [8.46052, 124.56676], [8.46057, 124.56681], [8.46066, 124.56688], [8.46078, 124.56699], [8.46093, 124.56712], [8.46102, 124.56719], [8.46107, 124.56723], [8.46125, 124.56736], [8.46137, 124.56743], [8.4615, 124.5675], [8.46153, 124.56752], [8.46169, 124.5676], [8.4617, 124.5676], [8.46186, 124.56766], [8.46192, 124.56769], [8.46202, 124.56774], [8.46209, 124.56777], [8.46221, 124.56787], [8.4623, 124.56797], [8.46243, 124.56809], [8.4625, 124.56817], [8.46256, 124.56822], [8.46268, 124.56833], [8.46293, 124.56854], [8.46311, 124.56868], [8.46313, 124.56869], [8.46328, 124.56881], [8.46334, 124.56884], [8.46344, 124.56891], [8.4635, 124.56892], [8.46355, 124.56893], [8.46359, 124.56892], [8.46363, 124.56891], [8.46368, 124.56888], [8.46375, 124.56881], [8.46383, 124.56874], [8.4639, 124.56865], [8.46392, 124.56864], [8.46398, 124.5686], [8.464, 124.56859], [8.46405, 124.56859], [8.46412, 124.56859], [8.4642, 124.56862], [8.46431, 124.56868], [8.46443, 124.56875], [8.46448, 124.56878], [8.46454, 124.56883], [8.4646, 124.56889], [8.46461, 124.56899], [8.46461, 124.56904], [8.46458, 124.56912], [8.46453, 124.56924], [8.46444, 124.56942], [8.46438, 124.56955], [8.46432, 124.56968], [8.46424, 124.56987], [8.46415, 124.57007], [8.46404, 124.57027], [8.46398, 124.57038], [8.46395, 124.57043], [8.4639, 124.57054], [8.4639, 124.57055], [8.46388, 124.57063], [8.46387, 124.57071], [8.46387, 124.57078], [8.46389, 124.57084], [8.46393, 124.57091], [8.46399, 124.57097], [8.4641, 124.57104], [8.4642, 124.57108], [8.46449, 124.57123], [8.46454, 124.57126], [8.46485, 124.57142], [8.46502, 124.57151], [8.46533, 124.57168], [8.46545, 124.57174], [8.46549, 124.57177], [8.46564, 124.57186], [8.46566, 124.57187], [8.46609, 124.57216], [8.4662, 124.57223], [8.46634, 124.57231], [8.4664, 124.57234], [8.4665, 124.57239], [8.46657, 124.57242], [8.46668, 124.57247], [8.46684, 124.57253], [8.46742, 124.57271], [8.46759, 124.57277], [8.46763, 124.57279], [8.46783, 124.57286], [8.468, 124.57292], [8.46818, 124.57297], [8.46836, 124.57301], [8.46851, 124.57303], [8.46869, 124.57305], [8.46885, 124.57306], [8.46904, 124.57305], [8.46917, 124.57303], [8.46922, 124.57302], [8.4698, 124.57296], [8.47007, 124.57295], [8.47039, 124.57292], [8.47047, 124.57291], [8.47051, 124.57291], [8.4706, 124.57291], [8.47062, 124.57291], [8.47076, 124.57291], [8.47113, 124.57295], [8.47151, 124.57299], [8.47153, 124.57299], [8.47163, 124.57298], [8.47188, 124.57296], [8.47216, 124.57295], [8.47239, 124.57297], [8.4725, 124.57299], [8.4726, 124.573], [8.47263, 124.573], [8.47274, 124.57304], [8.47284, 124.5731], [8.47301, 124.57328], [8.47304, 124.5733], [8.4732, 124.57347], [8.47354, 124.57382], [8.47367, 124.57395], [8.47374, 124.57403], [8.47394, 124.57426], [8.47415, 124.57449], [8.47425, 124.57461], [8.47433, 124.57471], [8.47437, 124.57476], [8.4744, 124.57482], [8.47442, 124.57492], [8.47444, 124.57508], [8.47446, 124.57526], [8.47445, 124.57531], [8.47445, 124.57541], [8.47442, 124.57563], [8.47442, 124.57567], [8.47441, 124.57583], [8.47442, 124.57602], [8.47443, 124.57622], [8.47443, 124.57634], [8.47443, 124.5764], [8.47442, 124.57644], [8.4744, 124.57653], [8.47435, 124.57663], [8.47429, 124.57674], [8.47423, 124.57685], [8.47422, 124.57686], [8.47421, 124.57689], [8.47417, 124.57703], [8.47416, 124.57715], [8.47416, 124.57729], [8.47419, 124.57739], [8.47421, 124.57742], [8.47423, 124.57748], [8.47428, 124.57755], [8.47429, 124.57757], [8.47432, 124.57762], [8.47432, 124.57767], [8.47432, 124.57771], [8.47431, 124.57775], [8.47427, 124.57782], [8.47424, 124.57789], [8.47422, 124.57798], [8.47422, 124.57803], [8.47423, 124.57808], [8.47423, 124.5781], [8.47425, 124.57813], [8.47428, 124.57818], [8.47431, 124.57822], [8.47435, 124.57827], [8.47438, 124.57834], [8.4744, 124.57837], [8.47447, 124.57848], [8.47452, 124.57864], [8.47453, 124.57877], [8.47453, 124.57888], [8.47454, 124.57889], [8.47456, 124.57895], [8.47459, 124.57901], [8.47463, 124.57909], [8.47466, 124.57915], [8.47469, 124.57922], [8.47473, 124.5793], [8.4748, 124.57944], [8.47483, 124.57954], [8.47486, 124.57965], [8.47489, 124.57976], [8.47491, 124.57986], [8.47492, 124.5799], [8.47493, 124.58001], [8.47498, 124.58019], [8.47501, 124.58029], [8.47503, 124.58034], [8.47506, 124.58039], [8.47511, 124.58044], [8.4752, 124.58054], [8.47535, 124.58061], [8.47546, 124.58068], [8.47556, 124.58075], [8.4756, 124.58077], [8.47564, 124.5808], [8.47565, 124.58083], [8.47566, 124.58084], [8.47566, 124.58085], [8.47567, 124.58096], [8.47562, 124.58105], [8.47552, 124.58116], [8.47546, 124.58122], [8.47543, 124.58128], [8.47542, 124.58133], [8.47542, 124.58139], [8.47543, 124.58143], [8.47546, 124.58149], [8.47553, 124.58158], [8.47557, 124.58163], [8.47561, 124.58169], [8.47562, 124.58172], [8.47566, 124.58179], [8.47571, 124.58187], [8.47573, 124.58192], [8.47578, 124.58204], [8.47579, 124.58206], [8.47586, 124.58217], [8.47591, 124.58224], [8.47597, 124.58231], [8.47604, 124.58236], [8.47611, 124.58243], [8.47616, 124.5825], [8.4762, 124.58258], [8.47626, 124.5827], [8.47627, 124.58275], [8.47627, 124.58279], [8.47629, 124.58294], [8.4763, 124.5831], [8.47629, 124.58326], [8.47629, 124.58329], [8.47628, 124.58348], [8.47628, 124.58357], [8.47627, 124.58377], [8.47627, 124.58394], [8.47627, 124.58402], [8.47626, 124.5842], [8.47626, 124.58421], [8.47625, 124.58446], [8.47628, 124.58456], [8.47631, 124.58473], [8.47632, 124.58474], [8.47636, 124.58483], [8.47644, 124.58499], [8.4765, 124.58514], [8.47666, 124.58538], [8.47672, 124.58545], [8.47684, 124.58558], [8.47696, 124.58571], [8.47703, 124.58577], [8.47714, 124.58588], [8.47729, 124.58603], [8.47753, 124.58626], [8.47755, 124.58629], [8.47797, 124.58665], [8.47802, 124.5867], [8.47812, 124.58681], [8.47818, 124.5869], [8.47821, 124.587], [8.47824, 124.58708], [8.47826, 124.58711], [8.47833, 124.58718], [8.47839, 124.58722], [8.47841, 124.58723], [8.47855, 124.5873], [8.47869, 124.58737], [8.4788, 124.58744], [8.47891, 124.58752], [8.47907, 124.58767], [8.47913, 124.58773], [8.47915, 124.58776], [8.47917, 124.5878], [8.47918, 124.58787], [8.47919, 124.58791], [8.47919, 124.58792], [8.47917, 124.58804], [8.47916, 124.5881], [8.47915, 124.58815], [8.47913, 124.58823], [8.47912, 124.58825], [8.47912, 124.58831], [8.47913, 124.58834], [8.47916, 124.58839], [8.47919, 124.58845], [8.47923, 124.58849], [8.47928, 124.58854], [8.47932, 124.58859], [8.47935, 124.58862], [8.47937, 124.58864], [8.47938, 124.58867], [8.47938, 124.5887], [8.47938, 124.58873], [8.47937, 124.58875], [8.47935, 124.58878], [8.47928, 124.58885], [8.4792, 124.58894], [8.47915, 124.589], [8.47912, 124.58906], [8.4791, 124.58913], [8.4791, 124.58917], [8.47911, 124.5892], [8.47914, 124.58924], [8.47921, 124.58932], [8.47933, 124.58948], [8.47943, 124.5896], [8.47943, 124.58961], [8.4795, 124.58967], [8.47956, 124.58972], [8.47962, 124.58977], [8.47977, 124.58985], [8.47997, 124.58994], [8.48012, 124.59003], [8.48016, 124.59004], [8.48019, 124.59005], [8.48028, 124.59013], [8.48033, 124.59018], [8.48039, 124.59027], [8.48048, 124.5904], [8.48052, 124.59044], [8.48054, 124.59047], [8.48061, 124.59054], [8.48064, 124.59057], [8.48066, 124.59059], [8.48074, 124.59067], [8.48077, 124.5907], [8.48081, 124.59074], [8.48087, 124.5908], [8.48088, 124.5908], [8.4809, 124.59082], [8.481, 124.59091], [8.48104, 124.59094], [8.48107, 124.59095], [8.48113, 124.59098], [8.48117, 124.59099], [8.48122, 124.59099], [8.4813, 124.59101], [8.48136, 124.59104], [8.4814, 124.59108], [8.48144, 124.59112], [8.48147, 124.59118], [8.48148, 124.59124], [8.4815, 124.5914], [8.48152, 124.5915], [8.48154, 124.59157], [8.4816, 124.5917], [8.48166, 124.59178], [8.4817, 124.59184], [8.48173, 124.59187], [8.48178, 124.59194], [8.48181, 124.59203], [8.48191, 124.59218], [8.48194, 124.59222], [8.4822, 124.59257], [8.48245, 124.59291], [8.48257, 124.59307], [8.48265, 124.59317], [8.48286, 124.5934], [8.48289, 124.59345], [8.48317, 124.59379], [8.4832, 124.59384], [8.48329, 124.59399], [8.48341, 124.59416], [8.48346, 124.59424], [8.48354, 124.59436], [8.48359, 124.59444], [8.48362, 124.59455], [8.48364, 124.59464], [8.48364, 124.5947], [8.48365, 124.59491], [8.48366, 124.59496], [8.48367, 124.595], [8.48369, 124.59505], [8.4837, 124.59507], [8.48372, 124.59511], [8.48379, 124.59517], [8.48385, 124.59524], [8.48391, 124.59531], [8.48414, 124.59553], [8.48418, 124.59559], [8.4842, 124.59564], [8.4842, 124.59566], [8.4842, 124.59569], [8.48419, 124.59572], [8.48419, 124.59574], [8.48416, 124.5958], [8.48415, 124.59581], [8.48409, 124.59586], [8.48398, 124.59598], [8.48361, 124.59638], [8.48352, 124.5965], [8.48346, 124.59657], [8.48344, 124.59661], [8.48343, 124.59664], [8.48341, 124.59677], [8.48341, 124.59684], [8.48342, 124.5969], [8.48344, 124.59695], [8.48346, 124.59697], [8.48354, 124.59703], [8.48366, 124.59715], [8.48369, 124.59718], [8.48372, 124.59722], [8.48373, 124.59726], [8.48374, 124.59731], [8.48374, 124.59736], [8.48372, 124.59741], [8.48371, 124.59743], [8.48366, 124.59749], [8.48362, 124.59754], [8.48359, 124.59758], [8.48354, 124.59763], [8.48316, 124.598], [8.48309, 124.59804], [8.483, 124.5981], [8.48286, 124.59821], [8.4827, 124.59832], [8.4818, 124.59897], [8.48176, 124.59899], [8.48122, 124.59937], [8.48122, 124.59938], [8.48106, 124.59947], [8.48089, 124.59953], [8.48049, 124.59961], [8.48031, 124.59963], [8.48018, 124.59967], [8.48009, 124.59973], [8.47999, 124.59984], [8.47986, 124.59999], [8.47977, 124.60005], [8.47962, 124.60011], [8.47839, 124.60043], [8.47737, 124.6007], [8.47689, 124.59998], [8.4768, 124.59988], [8.47669, 124.59973], [8.47648, 124.59947], [8.47634, 124.5993], [8.47627, 124.59921], [8.47617, 124.59909], [8.47612, 124.59902], [8.47595, 124.59882], [8.47578, 124.5986], [8.47568, 124.59843], [8.47555, 124.59819], [8.47543, 124.59794], [8.47525, 124.59752], [8.47506, 124.59707], [8.47503, 124.59701], [8.475, 124.59693], [8.47488, 124.59669], [8.47474, 124.59686], [8.47466, 124.597], [8.47459, 124.5971], [8.47413, 124.59758], [8.47405, 124.59775], [8.47395, 124.59795], [8.47382, 124.59832], [8.4736, 124.599], [8.47354, 124.59917], [8.47333, 124.59975], [8.47326, 124.60001], [8.47326, 124.60004], [8.47319, 124.60034], [8.47317, 124.60041], [8.47313, 124.60068], [8.47311, 124.60091], [8.47312, 124.60121], [8.47314, 124.60151], [8.47316, 124.60184], [8.47316, 124.60206], [8.47315, 124.60225], [8.47314, 124.60236], [8.47313, 124.60245], [8.4731, 124.60254], [8.47303, 124.60273], [8.4728, 124.60334], [8.4728, 124.6034], [8.47279, 124.60345], [8.47279, 124.60356], [8.47279, 124.60369], [8.4728, 124.60377], [8.47281, 124.60385], [8.47281, 124.60389], [8.47286, 124.6042], [8.47294, 124.60463], [8.47305, 124.60524], [8.47311, 124.60551], [8.47312, 124.60559], [8.47322, 124.60606], [8.47327, 124.60627], [8.47328, 124.60632], [8.47332, 124.60653], [8.47334, 124.6067], [8.47335, 124.60684], [8.47336, 124.607], [8.47336, 124.6071], [8.47336, 124.60715], [8.47336, 124.60736], [8.47337, 124.60751], [8.47339, 124.60775], [8.47343, 124.608], [8.47344, 124.6081], [8.47345, 124.60815], [8.47346, 124.60821], [8.47348, 124.60831], [8.4735, 124.60838], [8.47352, 124.60845], [8.47354, 124.60851], [8.47358, 124.6086], [8.47363, 124.60872], [8.47382, 124.6091], [8.47419, 124.60983], [8.47423, 124.60991], [8.4744, 124.61024], [8.47446, 124.61034], [8.47451, 124.61042], [8.47457, 124.6105], [8.47465, 124.61057], [8.47467, 124.61059], [8.47473, 124.61065], [8.47478, 124.61069], [8.47497, 124.61083], [8.47506, 124.6109], [8.4751, 124.61091], [8.47513, 124.61093], [8.47518, 124.61095], [8.4752, 124.61095], [8.47525, 124.61096], [8.47532, 124.61096], [8.4756, 124.61096], [8.4757, 124.61095], [8.47575, 124.61096], [8.47577, 124.61096], [8.4758, 124.61097], [8.47585, 124.61099], [8.4759, 124.61102], [8.47594, 124.61107], [8.47597, 124.61112], [8.476, 124.6112], [8.476, 124.61121], [8.476, 124.61128], [8.476, 124.61139], [8.47592, 124.61196], [8.47591, 124.61203], [8.47586, 124.61232], [8.47582, 124.61244], [8.47578, 124.6125], [8.47572, 124.61258], [8.47563, 124.61263], [8.47559, 124.61264], [8.47553, 124.61265], [8.47544, 124.61265], [8.47513, 124.61266], [8.47498, 124.61267], [8.47449, 124.61271], [8.47442, 124.61273], [8.47438, 124.61274], [8.47434, 124.61275], [8.4743, 124.61279], [8.47426, 124.61282], [8.47424, 124.61286], [8.47419, 124.61296], [8.47414, 124.61313], [8.47413, 124.61315], [8.4741, 124.61333], [8.47408, 124.61351], [8.47407, 124.61368], [8.47407, 124.61372], [8.47407, 124.61378], [8.47409, 124.61389], [8.47412, 124.61396], [8.47419, 124.61412], [8.4743, 124.61432], [8.47435, 124.61444], [8.47437, 124.61451], [8.47437, 124.61457], [8.47437, 124.61461], [8.47436, 124.61468], [8.47435, 124.61472], [8.47428, 124.61482], [8.47421, 124.61489], [8.47411, 124.61496], [8.47392, 124.61504], [8.47371, 124.6151], [8.47351, 124.61517], [8.47334, 124.61526], [8.47323, 124.61534], [8.47311, 124.61544], [8.47303, 124.61552], [8.47293, 124.61566], [8.47277, 124.61593], [8.47266, 124.61613], [8.47252, 124.61641], [8.47237, 124.61666], [8.47219, 124.617], [8.47213, 124.61709], [8.47204, 124.61728], [8.472, 124.61739], [8.47198, 124.61748], [8.47196, 124.61756], [8.47195, 124.61763], [8.47195, 124.61768], [8.47195, 124.61776], [8.47195, 124.61782], [8.47196, 124.61785], [8.47197, 124.61788], [8.47198, 124.61791], [8.472, 124.61796], [8.47204, 124.61803], [8.47209, 124.61809], [8.4722, 124.61823], [8.4723, 124.61837], [8.47242, 124.61852], [8.47254, 124.61868], [8.47261, 124.61878], [8.47265, 124.61884], [8.47269, 124.6189], [8.47271, 124.61895], [8.47274, 124.61902], [8.47276, 124.61912], [8.47277, 124.61916], [8.47278, 124.6192], [8.47281, 124.6193], [8.47283, 124.61941], [8.47285, 124.6195], [8.47287, 124.61958], [8.47292, 124.61974], [8.47294, 124.6198], [8.47296, 124.61985], [8.47299, 124.61989], [8.47303, 124.61993], [8.47306, 124.61996], [8.47311, 124.62], [8.47315, 124.62002], [8.47317, 124.62004], [8.47324, 124.62006], [8.47337, 124.62009], [8.47371, 124.62013], [8.4739, 124.62018], [8.474, 124.62021], [8.47411, 124.62027], [8.47424, 124.62036], [8.47434, 124.62045], [8.47465, 124.62071], [8.47483, 124.62093], [8.4749, 124.62108], [8.47492, 124.62117], [8.47492, 124.62126], [8.4749, 124.62138], [8.47486, 124.6215], [8.4748, 124.62166], [8.47461, 124.62202], [8.47457, 124.62216], [8.47455, 124.62226], [8.47455, 124.62237], [8.47457, 124.62245], [8.47461, 124.62257], [8.47467, 124.62268], [8.47482, 124.6229], [8.4749, 124.62306], [8.47494, 124.62315], [8.47495, 124.62323], [8.47496, 124.62339], [8.47494, 124.62349], [8.47492, 124.62359], [8.47488, 124.62374], [8.47478, 124.62398], [8.47471, 124.62419], [8.47466, 124.62452], [8.47466, 124.62468], [8.47471, 124.62494], [8.47472, 124.62497], [8.47478, 124.62512], [8.47479, 124.62514], [8.47486, 124.62526], [8.47509, 124.6255], [8.47535, 124.62575], [8.47558, 124.62593], [8.47571, 124.62601], [8.47582, 124.62606], [8.47602, 124.62613], [8.4762, 124.62617], [8.47656, 124.62625], [8.47678, 124.6263], [8.47731, 124.62641], [8.47761, 124.6265], [8.47796, 124.62666], [8.4782, 124.62681], [8.4784, 124.62695], [8.4785, 124.62704], [8.47856, 124.6271], [8.4786, 124.62716], [8.47863, 124.62723], [8.47865, 124.62728], [8.47867, 124.62739], [8.47867, 124.62746], [8.47866, 124.62754], [8.47863, 124.62765], [8.47859, 124.62773], [8.47853, 124.62779], [8.47847, 124.62784], [8.47841, 124.62789], [8.47827, 124.62799], [8.47816, 124.62809], [8.47829, 124.6281], [8.47835, 124.6281], [8.47839, 124.6281], [8.47866, 124.62809], [8.47883, 124.62808], [8.47893, 124.62808], [8.479, 124.62809], [8.47908, 124.62812], [8.47934, 124.62823], [8.48015, 124.62856], [8.48024, 124.62861], [8.4804, 124.62867], [8.48063, 124.62875], [8.48083, 124.62882], [8.48095, 124.62887], [8.48104, 124.6289], [8.48112, 124.62894], [8.48117, 124.62897], [8.48125, 124.62902], [8.48132, 124.62906], [8.48137, 124.6291], [8.48142, 124.62915], [8.48148, 124.62921], [8.48159, 124.62933], [8.48214, 124.62985], [8.48235, 124.63007], [8.48277, 124.63046], [8.48301, 124.63069], [8.4833, 124.63097], [8.48284, 124.63273], [8.48266, 124.63346], [8.4825, 124.63409], [8.48242, 124.63437], [8.48236, 124.63455], [8.48231, 124.63472], [8.48224, 124.63494], [8.48214, 124.6352], [8.48198, 124.63581], [8.48175, 124.63643], [8.48156, 124.63688], [8.48141, 124.63683], [8.48126, 124.63677], [8.48099, 124.63668], [8.48081, 124.63663], [8.48061, 124.63658], [8.48019, 124.63651], [8.47934, 124.6364], [8.4793, 124.63681], [8.47928, 124.63704], [8.47953, 124.63705], [8.47979, 124.63708], [8.48008, 124.63712], [8.48025, 124.63715]],
  },
  {
    name: "Directions from Carmen Public Market, V. Neri Street, Cagayan de Oro City, Misamis Oriental, FJJP+3Q4, Cagayan de Oro, Misamis Oriental, Philippines to FH58+9F, Cagayan de Oro, Misamis Oriental, Philippines",
    color: "orange",
    coordinates: [[8.48006, 124.63712], [8.48008, 124.63712], [8.4803, 124.63716], [8.48049, 124.63721], [8.48066, 124.63726], [8.48101, 124.63738], [8.48133, 124.63749], [8.48144, 124.63716], [8.48156, 124.63688], [8.48175, 124.63643], [8.48198, 124.63581], [8.48214, 124.6352], [8.48224, 124.63494], [8.48231, 124.63472], [8.48236, 124.63455], [8.48242, 124.63437], [8.4825, 124.63409], [8.48266, 124.63346], [8.48284, 124.63273], [8.4833, 124.63097], [8.48301, 124.63069], [8.48277, 124.63046], [8.48235, 124.63007], [8.48214, 124.62985], [8.48159, 124.62933], [8.48148, 124.62921], [8.48142, 124.62915], [8.48137, 124.6291], [8.48132, 124.62906], [8.48125, 124.62902], [8.48117, 124.62897], [8.48112, 124.62894], [8.48104, 124.6289], [8.48095, 124.62887], [8.48083, 124.62882], [8.48063, 124.62875], [8.4804, 124.62867], [8.48024, 124.62861], [8.4798, 124.62916], [8.47954, 124.62949], [8.47885, 124.63033], [8.47829, 124.63096], [8.47827, 124.63099], [8.47804, 124.63123], [8.4778, 124.63149], [8.47753, 124.63177], [8.47725, 124.63207], [8.47686, 124.63189], [8.4763, 124.63163], [8.47617, 124.63158], [8.47611, 124.63155], [8.47581, 124.63143], [8.47572, 124.63139], [8.47564, 124.63134], [8.47548, 124.6312], [8.47519, 124.63095], [8.47544, 124.63057], [8.47583, 124.62994], [8.47608, 124.62958], [8.47621, 124.62944], [8.47635, 124.62929], [8.47659, 124.62907], [8.47663, 124.62905], [8.47693, 124.62882], [8.47719, 124.62866], [8.47736, 124.62856], [8.47785, 124.62826], [8.47798, 124.62818], [8.47816, 124.62809], [8.47827, 124.62799], [8.47841, 124.62789], [8.47847, 124.62784], [8.47853, 124.62779], [8.47859, 124.62773], [8.47863, 124.62765], [8.47866, 124.62754], [8.47867, 124.62746], [8.47867, 124.62739], [8.47865, 124.62728], [8.47863, 124.62723], [8.4786, 124.62716], [8.47856, 124.6271], [8.4785, 124.62704], [8.4784, 124.62695], [8.4782, 124.62681], [8.47796, 124.62666], [8.47761, 124.6265], [8.47731, 124.62641], [8.47678, 124.6263], [8.47656, 124.62625], [8.4762, 124.62617], [8.47602, 124.62613], [8.47582, 124.62606], [8.47571, 124.62601], [8.47558, 124.62593], [8.47535, 124.62575], [8.47509, 124.6255], [8.47486, 124.62526], [8.47479, 124.62514], [8.47478, 124.62512], [8.47472, 124.62497], [8.47471, 124.62494], [8.47466, 124.62468], [8.47466, 124.62452], [8.47471, 124.62419], [8.47478, 124.62398], [8.47488, 124.62374], [8.47492, 124.62359], [8.47494, 124.62349], [8.47496, 124.62339], [8.47495, 124.62323], [8.47494, 124.62315], [8.4749, 124.62306], [8.47482, 124.6229], [8.47467, 124.62268], [8.47461, 124.62257], [8.47457, 124.62245], [8.47455, 124.62237], [8.47455, 124.62226], [8.47457, 124.62216], [8.47461, 124.62202], [8.4748, 124.62166], [8.47486, 124.6215], [8.4749, 124.62138], [8.47492, 124.62126], [8.47492, 124.62117], [8.4749, 124.62108], [8.47483, 124.62093], [8.47465, 124.62071], [8.47434, 124.62045], [8.47424, 124.62036], [8.47411, 124.62027], [8.474, 124.62021], [8.4739, 124.62018], [8.47371, 124.62013], [8.47337, 124.62009], [8.47324, 124.62006], [8.47317, 124.62004], [8.47315, 124.62002], [8.47311, 124.62], [8.47306, 124.61996], [8.47303, 124.61993], [8.47299, 124.61989], [8.47296, 124.61985], [8.47294, 124.6198], [8.47292, 124.61974], [8.47287, 124.61958], [8.47285, 124.6195], [8.47283, 124.61941], [8.47281, 124.6193], [8.47278, 124.6192], [8.47277, 124.61916], [8.47276, 124.61912], [8.47274, 124.61902], [8.47271, 124.61895], [8.47269, 124.6189], [8.47265, 124.61884], [8.47261, 124.61878], [8.47254, 124.61868], [8.47242, 124.61852], [8.4723, 124.61837], [8.4722, 124.61823], [8.47209, 124.61809], [8.47204, 124.61803], [8.472, 124.61796], [8.47198, 124.61791], [8.47197, 124.61788], [8.47196, 124.61785], [8.47195, 124.61782], [8.47195, 124.61776], [8.47195, 124.61768], [8.47195, 124.61763], [8.47196, 124.61756], [8.47198, 124.61748], [8.472, 124.61739], [8.47204, 124.61728], [8.47213, 124.61709], [8.47219, 124.617], [8.47237, 124.61666], [8.47252, 124.61641], [8.47266, 124.61613], [8.47277, 124.61593], [8.47293, 124.61566], [8.47303, 124.61552], [8.47311, 124.61544], [8.47323, 124.61534], [8.47334, 124.61526], [8.47351, 124.61517], [8.47371, 124.6151], [8.47392, 124.61504], [8.47411, 124.61496], [8.47421, 124.61489], [8.47428, 124.61482], [8.47435, 124.61472], [8.47436, 124.61468], [8.47437, 124.61461], [8.47437, 124.61457], [8.47437, 124.61451], [8.47435, 124.61444], [8.4743, 124.61432], [8.47419, 124.61412], [8.47412, 124.61396], [8.47409, 124.61389], [8.47407, 124.61378], [8.47407, 124.61372], [8.47407, 124.61368], [8.47408, 124.61351], [8.4741, 124.61333], [8.47413, 124.61315], [8.47414, 124.61313], [8.47419, 124.61296], [8.47424, 124.61286], [8.47426, 124.61282], [8.4743, 124.61279], [8.47434, 124.61275], [8.47438, 124.61274], [8.47442, 124.61273], [8.47449, 124.61271], [8.47498, 124.61267], [8.47513, 124.61266], [8.47544, 124.61265], [8.47553, 124.61265], [8.47559, 124.61264], [8.47563, 124.61263], [8.47572, 124.61258], [8.47578, 124.6125], [8.47582, 124.61244], [8.47586, 124.61232], [8.47591, 124.61203], [8.47592, 124.61196], [8.476, 124.61139], [8.476, 124.61128], [8.476, 124.61121], [8.476, 124.6112], [8.47597, 124.61112], [8.47594, 124.61107], [8.4759, 124.61102], [8.47585, 124.61099], [8.4758, 124.61097], [8.47577, 124.61096], [8.47575, 124.61096], [8.4757, 124.61095], [8.4756, 124.61096], [8.47532, 124.61096], [8.47525, 124.61096], [8.4752, 124.61095], [8.47518, 124.61095], [8.47513, 124.61093], [8.4751, 124.61091], [8.47506, 124.6109], [8.47497, 124.61083], [8.47478, 124.61069], [8.47473, 124.61065], [8.47467, 124.61059], [8.47465, 124.61057], [8.47457, 124.6105], [8.47451, 124.61042], [8.47446, 124.61034], [8.4744, 124.61024], [8.47423, 124.60991], [8.47419, 124.60983], [8.47382, 124.6091], [8.47363, 124.60872], [8.47358, 124.6086], [8.47354, 124.60851], [8.47352, 124.60845], [8.4735, 124.60838], [8.47348, 124.60831], [8.47346, 124.60821], [8.47345, 124.60815], [8.47344, 124.6081], [8.47343, 124.608], [8.47339, 124.60775], [8.47337, 124.60751], [8.47336, 124.60736], [8.47336, 124.60715], [8.47336, 124.6071], [8.47336, 124.607], [8.47335, 124.60684], [8.47334, 124.6067], [8.47332, 124.60653], [8.47328, 124.60632], [8.47327, 124.60627], [8.47322, 124.60606], [8.47312, 124.60559], [8.47311, 124.60551], [8.47305, 124.60524], [8.47294, 124.60463], [8.47286, 124.6042], [8.47281, 124.60389], [8.47281, 124.60385], [8.4728, 124.60377], [8.47279, 124.60369], [8.47279, 124.60356], [8.47279, 124.60345], [8.4728, 124.6034], [8.4728, 124.60334], [8.47303, 124.60273], [8.4731, 124.60254], [8.47313, 124.60245], [8.47314, 124.60236], [8.47315, 124.60225], [8.47316, 124.60206], [8.47316, 124.60184], [8.47314, 124.60151], [8.47312, 124.60121], [8.47311, 124.60091], [8.47313, 124.60068], [8.47317, 124.60041], [8.47319, 124.60034], [8.47326, 124.60004], [8.47326, 124.60001], [8.47333, 124.59975], [8.47354, 124.59917], [8.4736, 124.599], [8.47382, 124.59832], [8.47395, 124.59795], [8.47405, 124.59775], [8.47413, 124.59758], [8.47459, 124.5971], [8.47466, 124.597], [8.47474, 124.59686], [8.47488, 124.59669], [8.475, 124.59693], [8.47503, 124.59701], [8.47506, 124.59707], [8.47525, 124.59752], [8.47543, 124.59794], [8.47555, 124.59819], [8.47568, 124.59843], [8.47578, 124.5986], [8.47595, 124.59882], [8.47612, 124.59902], [8.47617, 124.59909], [8.47627, 124.59921], [8.47634, 124.5993], [8.47648, 124.59947], [8.47669, 124.59973], [8.4768, 124.59988], [8.47689, 124.59998], [8.47737, 124.6007], [8.47839, 124.60043], [8.47962, 124.60011], [8.47977, 124.60005], [8.47986, 124.59999], [8.47999, 124.59984], [8.48009, 124.59973], [8.48018, 124.59967], [8.48031, 124.59963], [8.48049, 124.59961], [8.48089, 124.59953], [8.48106, 124.59947], [8.48122, 124.59938], [8.48122, 124.59937], [8.48176, 124.59899], [8.4818, 124.59897], [8.4827, 124.59832], [8.48286, 124.59821], [8.483, 124.5981], [8.48309, 124.59804], [8.48316, 124.598], [8.48354, 124.59763], [8.48359, 124.59758], [8.48362, 124.59754], [8.48366, 124.59749], [8.48371, 124.59743], [8.48372, 124.59741], [8.48374, 124.59736], [8.48374, 124.59731], [8.48373, 124.59726], [8.48372, 124.59722], [8.48369, 124.59718], [8.48366, 124.59715], [8.48354, 124.59703], [8.48346, 124.59697], [8.48344, 124.59695], [8.48342, 124.5969], [8.48341, 124.59684], [8.48341, 124.59677], [8.48343, 124.59664], [8.48344, 124.59661], [8.48346, 124.59657], [8.48352, 124.5965], [8.48361, 124.59638], [8.48398, 124.59598], [8.48409, 124.59586], [8.48415, 124.59581], [8.48416, 124.5958], [8.48419, 124.59574], [8.48419, 124.59572], [8.4842, 124.59569], [8.4842, 124.59566], [8.4842, 124.59564], [8.48418, 124.59559], [8.48414, 124.59553], [8.48391, 124.59531], [8.48385, 124.59524], [8.48379, 124.59517], [8.48372, 124.59511], [8.4837, 124.59507], [8.48369, 124.59505], [8.48367, 124.595], [8.48366, 124.59496], [8.48365, 124.59491], [8.48364, 124.5947], [8.48364, 124.59464], [8.48362, 124.59455], [8.48359, 124.59444], [8.48354, 124.59436], [8.48346, 124.59424], [8.48341, 124.59416], [8.48329, 124.59399], [8.4832, 124.59384], [8.48317, 124.59379], [8.48289, 124.59345], [8.48286, 124.5934], [8.48265, 124.59317], [8.48257, 124.59307], [8.48245, 124.59291], [8.4822, 124.59257], [8.48194, 124.59222], [8.48191, 124.59218], [8.48181, 124.59203], [8.48178, 124.59194], [8.48173, 124.59187], [8.4817, 124.59184], [8.48166, 124.59178], [8.4816, 124.5917], [8.48154, 124.59157], [8.48152, 124.5915], [8.4815, 124.5914], [8.48148, 124.59124], [8.48147, 124.59118], [8.48144, 124.59112], [8.4814, 124.59108], [8.48136, 124.59104], [8.4813, 124.59101], [8.48122, 124.59099], [8.48117, 124.59099], [8.48113, 124.59098], [8.48107, 124.59095], [8.48104, 124.59094], [8.481, 124.59091], [8.4809, 124.59082], [8.48088, 124.5908], [8.48087, 124.5908], [8.48081, 124.59074], [8.48077, 124.5907], [8.48074, 124.59067], [8.48066, 124.59059], [8.48064, 124.59057], [8.48061, 124.59054], [8.48054, 124.59047], [8.48052, 124.59044], [8.48048, 124.5904], [8.48039, 124.59027], [8.48033, 124.59018], [8.48028, 124.59013], [8.48019, 124.59005], [8.48016, 124.59004], [8.48012, 124.59003], [8.47997, 124.58994], [8.47977, 124.58985], [8.47962, 124.58977], [8.47956, 124.58972], [8.4795, 124.58967], [8.47943, 124.58961], [8.47943, 124.5896], [8.47933, 124.58948], [8.47921, 124.58932], [8.47914, 124.58924], [8.47911, 124.5892], [8.4791, 124.58917], [8.4791, 124.58913], [8.47912, 124.58906], [8.47915, 124.589], [8.4792, 124.58894], [8.47928, 124.58885], [8.47935, 124.58878], [8.47937, 124.58875], [8.47938, 124.58873], [8.47938, 124.5887], [8.47938, 124.58867], [8.47937, 124.58864], [8.47935, 124.58862], [8.47932, 124.58859], [8.47928, 124.58854], [8.47923, 124.58849], [8.47919, 124.58845], [8.47916, 124.58839], [8.47913, 124.58834], [8.47912, 124.58831], [8.47912, 124.58825], [8.47913, 124.58823], [8.47915, 124.58815], [8.47916, 124.5881], [8.47917, 124.58804], [8.47919, 124.58792], [8.47919, 124.58791], [8.47918, 124.58787], [8.47917, 124.5878], [8.47915, 124.58776], [8.47913, 124.58773], [8.47907, 124.58767], [8.47891, 124.58752], [8.4788, 124.58744], [8.47869, 124.58737], [8.47855, 124.5873], [8.47841, 124.58723], [8.47839, 124.58722], [8.47833, 124.58718], [8.47826, 124.58711], [8.47824, 124.58708], [8.47821, 124.587], [8.47818, 124.5869], [8.47812, 124.58681], [8.47802, 124.5867], [8.47797, 124.58665], [8.47755, 124.58629], [8.47753, 124.58626], [8.47729, 124.58603], [8.47714, 124.58588], [8.47703, 124.58577], [8.47696, 124.58571], [8.47684, 124.58558], [8.47672, 124.58545], [8.47666, 124.58538], [8.4765, 124.58514], [8.47644, 124.58499], [8.47636, 124.58483], [8.47632, 124.58474], [8.47631, 124.58473], [8.47628, 124.58456], [8.47625, 124.58446], [8.47626, 124.58421], [8.47626, 124.5842], [8.47627, 124.58402], [8.47627, 124.58394], [8.47627, 124.58377], [8.47628, 124.58357], [8.47628, 124.58348], [8.47629, 124.58329], [8.47629, 124.58326], [8.4763, 124.5831], [8.47629, 124.58294], [8.47627, 124.58279], [8.47627, 124.58275], [8.47626, 124.5827], [8.4762, 124.58258], [8.47616, 124.5825], [8.47611, 124.58243], [8.47604, 124.58236], [8.47597, 124.58231], [8.47591, 124.58224], [8.47586, 124.58217], [8.47579, 124.58206], [8.47578, 124.58204], [8.47573, 124.58192], [8.47571, 124.58187], [8.47566, 124.58179], [8.47562, 124.58172], [8.47561, 124.58169], [8.47557, 124.58163], [8.47553, 124.58158], [8.47546, 124.58149], [8.47543, 124.58143], [8.47542, 124.58139], [8.47542, 124.58133], [8.47543, 124.58128], [8.47546, 124.58122], [8.47552, 124.58116], [8.47562, 124.58105], [8.47567, 124.58096], [8.47566, 124.58085], [8.47566, 124.58084], [8.47565, 124.58083], [8.47564, 124.5808], [8.4756, 124.58077], [8.47556, 124.58075], [8.47546, 124.58068], [8.47535, 124.58061], [8.4752, 124.58054], [8.47511, 124.58044], [8.47506, 124.58039], [8.47503, 124.58034], [8.47501, 124.58029], [8.47498, 124.58019], [8.47493, 124.58001], [8.47492, 124.5799], [8.47491, 124.57986], [8.47489, 124.57976], [8.47486, 124.57965], [8.47483, 124.57954], [8.4748, 124.57944], [8.47473, 124.5793], [8.47469, 124.57922], [8.47466, 124.57915], [8.47463, 124.57909], [8.47459, 124.57901], [8.47456, 124.57895], [8.47454, 124.57889], [8.47453, 124.57888], [8.47453, 124.57877], [8.47452, 124.57864], [8.47447, 124.57848], [8.4744, 124.57837], [8.47438, 124.57834], [8.47435, 124.57827], [8.47431, 124.57822], [8.47428, 124.57818], [8.47425, 124.57813], [8.47423, 124.5781], [8.47423, 124.57808], [8.47422, 124.57803], [8.47422, 124.57798], [8.47424, 124.57789], [8.47427, 124.57782], [8.47431, 124.57775], [8.47432, 124.57771], [8.47432, 124.57767], [8.47432, 124.57762], [8.47429, 124.57757], [8.47428, 124.57755], [8.47423, 124.57748], [8.47421, 124.57742], [8.47419, 124.57739], [8.47416, 124.57729], [8.47416, 124.57715], [8.47417, 124.57703], [8.47421, 124.57689], [8.47422, 124.57686], [8.47423, 124.57685], [8.47429, 124.57674], [8.47435, 124.57663], [8.4744, 124.57653], [8.47442, 124.57644], [8.47443, 124.5764], [8.47443, 124.57634], [8.47443, 124.57622], [8.47442, 124.57602], [8.47441, 124.57583], [8.47442, 124.57567], [8.47442, 124.57563], [8.47445, 124.57541], [8.47445, 124.57531], [8.47446, 124.57526], [8.47444, 124.57508], [8.47442, 124.57492], [8.4744, 124.57482], [8.47437, 124.57476], [8.47433, 124.57471], [8.47425, 124.57461], [8.47415, 124.57449], [8.47394, 124.57426], [8.47374, 124.57403], [8.47367, 124.57395], [8.47354, 124.57382], [8.4732, 124.57347], [8.47304, 124.5733], [8.47301, 124.57328], [8.47284, 124.5731], [8.47274, 124.57304], [8.47263, 124.573], [8.4726, 124.573], [8.4725, 124.57299], [8.47239, 124.57297], [8.47216, 124.57295], [8.47188, 124.57296], [8.47163, 124.57298], [8.47153, 124.57299], [8.47151, 124.57299], [8.47113, 124.57295], [8.47076, 124.57291], [8.47062, 124.57291], [8.4706, 124.57291], [8.47051, 124.57291], [8.47047, 124.57291], [8.47039, 124.57292], [8.47007, 124.57295], [8.4698, 124.57296], [8.46922, 124.57302], [8.46917, 124.57303], [8.46904, 124.57305], [8.46885, 124.57306], [8.46869, 124.57305], [8.46851, 124.57303], [8.46836, 124.57301], [8.46818, 124.57297], [8.468, 124.57292], [8.46783, 124.57286], [8.46763, 124.57279], [8.46759, 124.57277], [8.46742, 124.57271], [8.46684, 124.57253], [8.46668, 124.57247], [8.46657, 124.57242], [8.4665, 124.57239], [8.4664, 124.57234], [8.46634, 124.57231], [8.4662, 124.57223], [8.46609, 124.57216], [8.46566, 124.57187], [8.46564, 124.57186], [8.46549, 124.57177], [8.46545, 124.57174], [8.46533, 124.57168], [8.46502, 124.57151], [8.46485, 124.57142], [8.46454, 124.57126], [8.46449, 124.57123], [8.4642, 124.57108], [8.4641, 124.57104], [8.46399, 124.57097], [8.46393, 124.57091], [8.46389, 124.57084], [8.46387, 124.57078], [8.46387, 124.57071], [8.46388, 124.57063], [8.4639, 124.57055], [8.4639, 124.57054], [8.46395, 124.57043], [8.46398, 124.57038], [8.46404, 124.57027], [8.46415, 124.57007], [8.46424, 124.56987], [8.46432, 124.56968], [8.46438, 124.56955], [8.46444, 124.56942], [8.46453, 124.56924], [8.46458, 124.56912], [8.46461, 124.56904], [8.46461, 124.56899], [8.4646, 124.56889], [8.46454, 124.56883], [8.46448, 124.56878], [8.46443, 124.56875], [8.46431, 124.56868], [8.4642, 124.56862], [8.46412, 124.56859], [8.46405, 124.56859], [8.464, 124.56859], [8.46398, 124.5686], [8.46392, 124.56864], [8.4639, 124.56865], [8.46383, 124.56874], [8.46375, 124.56881], [8.46368, 124.56888], [8.46363, 124.56891], [8.46359, 124.56892], [8.46355, 124.56893], [8.4635, 124.56892], [8.46344, 124.56891], [8.46334, 124.56884], [8.46328, 124.56881], [8.46313, 124.56869], [8.46311, 124.56868], [8.46293, 124.56854], [8.46268, 124.56833], [8.46256, 124.56822], [8.4625, 124.56817], [8.46243, 124.56809], [8.4623, 124.56797], [8.46221, 124.56787], [8.46209, 124.56777], [8.46202, 124.56774], [8.46192, 124.56769], [8.46186, 124.56766], [8.4617, 124.5676], [8.46169, 124.5676], [8.46153, 124.56752], [8.4615, 124.5675], [8.46137, 124.56743], [8.46125, 124.56736], [8.46107, 124.56723], [8.46102, 124.56719], [8.46093, 124.56712], [8.46078, 124.56699], [8.46066, 124.56688], [8.46057, 124.56681], [8.46052, 124.56676], [8.46039, 124.56664], [8.46032, 124.56658], [8.46005, 124.56635], [8.45998, 124.56629], [8.45982, 124.56615], [8.4597, 124.56605], [8.45966, 124.56602]],
  },

    ];

// Haversine distance helper
function haversineDistance(coord1, coord2) {
  const toRad = (x) => (x * Math.PI) / 180;
  const R = 6371; // Earth's radius in km
  const dLat = toRad(coord2[0] - coord1[0]);
  const dLon = toRad(coord2[1] - coord1[1]);
  const lat1 = toRad(coord1[0]);
  const lat2 = toRad(coord2[0]);

  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.sin(dLon / 2) ** 2 * Math.cos(lat1) * Math.cos(lat2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

// Find the nearest point on any route to a given location
function findNearestRoutePoint(location, routes) {
  let minDist = Infinity;
  let closestRoute = null;
  let closestPoint = null;
  let closestIndex = -1;

  for (const route of routes) {
    for (let i = 0; i < route.coordinates.length; i++) {
      const coord = route.coordinates[i];
      const dist = haversineDistance(location, coord);
      if (dist < minDist) {
        minDist = dist;
        closestRoute = route;
        closestPoint = coord;
        closestIndex = i;
      }
    }
  }

  return { route: closestRoute, point: closestPoint, index: closestIndex, distance: minDist };
}

// Find the best route between two points
function findBestRoute(origin, destination, routes) {
  const originNearest = findNearestRoutePoint(origin, routes);
  const destinationNearest = findNearestRoutePoint(destination, routes);

  // If both points are on the same route
  if (originNearest.route.name === destinationNearest.route.name) {
    const route = originNearest.route;
    const startIndex = Math.min(originNearest.index, destinationNearest.index);
    const endIndex = Math.max(originNearest.index, destinationNearest.index);
    const path = route.coordinates.slice(startIndex, endIndex + 1);
    
    return [{
      route: route.name,
      color: route.color,
      path: path,
      from: originNearest.point,
      to: destinationNearest.point,
      distance: calculatePathDistance(path)
    }];
  } else {
    // For demo purposes, we'll create a transfer point
    const transferPoint = [8.478, 124.642]; // A point where both routes are close
    
    const firstLeg = {
      route: originNearest.route.name,
      color: originNearest.route.color,
      path: getPathToPoint(originNearest, transferPoint, originNearest.route),
      from: originNearest.point,
      to: transferPoint,
      distance: calculatePathDistance(getPathToPoint(originNearest, transferPoint, originNearest.route))
    };
    
    const secondLeg = {
      route: destinationNearest.route.name,
      color: destinationNearest.route.color,
      path: getPathToPoint(findNearestRoutePoint(transferPoint, [destinationNearest.route]), destinationNearest.point, destinationNearest.route),
      from: transferPoint,
      to: destinationNearest.point,
      distance: calculatePathDistance(getPathToPoint(findNearestRoutePoint(transferPoint, [destinationNearest.route]), destinationNearest.point, destinationNearest.route))
    };
    
    return [firstLeg, secondLeg];
  }
}

// Helper function to get path to a point
function getPathToPoint(startInfo, endPoint, route) {
  const endInfo = findNearestRoutePoint(endPoint, [route]);
  const startIndex = Math.min(startInfo.index, endInfo.index);
  const endIndex = Math.max(startInfo.index, endInfo.index);
  return route.coordinates.slice(startIndex, endIndex + 1);
}

// Calculate total distance of a path
function calculatePathDistance(path) {
  let totalDistance = 0;
  for (let i = 1; i < path.length; i++) {
    totalDistance += haversineDistance(path[i-1], path[i]);
  }
  return totalDistance;
}

// A hook to detect clicks and set markers
function MapEvents({ setOrigin, setDestination, mode }) {
  useMapEvents({
    click(e) {
      if (mode === "origin") {
        setOrigin([e.latlng.lat, e.latlng.lng]);
      } else if (mode === "destination") {
        setDestination([e.latlng.lat, e.latlng.lng]);
      }
    },
  });
  return null;
}

// Component to recenter map when needed
function RecenterMap({ position }) {
  const map = useMap();
  useEffect(() => {
    if (position) {
      map.setView(position, map.getZoom());
    }
  }, [position, map]);
  return null;
}

function Map() {
  const [currentLocation, setCurrentLocation] = useState(null);
  const [origin, setOrigin] = useState(null);
  const [destination, setDestination] = useState(null);
  const [loading, setLoading] = useState(false);
  const [routeResult, setRouteResult] = useState(null);
  const [panelState, setPanelState] = useState("collapsed");
  const [isDragging, setIsDragging] = useState(false);
  const [startY, setStartY] = useState(0);
  const [startHeight, setStartHeight] = useState(0);
  const [mode, setMode] = useState("origin"); // "origin" or "destination"
  const [geoError, setGeoError] = useState(null);
  const panelRef = useRef(null);
  const dragHandleRef = useRef(null);

  const defaultPosition = [8.4542, 124.6318];

  // Get user's current location
  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      setLoading(true);
      setGeoError(null);
      
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setCurrentLocation([latitude, longitude]);
          setOrigin([latitude, longitude]);
          setMode("destination");
          setLoading(false);
          setPanelState("half");
        },
        (error) => {
          console.error("Error getting location:", error);
          setLoading(false);
          setGeoError("Unable to access your location. Please check your browser permissions or manually select a location on the map.");
        },
        {
          timeout: 10000,
          enableHighAccuracy: true
        }
      );
    } else {
      setGeoError("Geolocation is not supported by this browser. Please manually select a location on the map.");
    }
  };

  // Calculate route
  useEffect(() => {
    if (origin && destination) {
      setLoading(true);
      setRouteResult(null);

      const timer = setTimeout(() => {
        const result = findBestRoute(origin, destination, jeepneyRoutes);
        setRouteResult(result);
        setLoading(false);
        setPanelState("half");
      }, 1500);

      return () => clearTimeout(timer);
    }
  }, [origin, destination]);

  const handleClear = () => {
    setOrigin(null);
    setDestination(null);
    setCurrentLocation(null);
    setRouteResult(null);
    setMode("origin");
    setPanelState("collapsed");
    setGeoError(null);
  };

  // Handle touch events for dragging the panel
  const handleTouchStart = useCallback((e) => {
    setIsDragging(true);
    setStartY(e.touches[0].clientY);
    
    let currentHeight = 0;
    if (panelState === "collapsed") currentHeight = 10;
    else if (panelState === "half") currentHeight = 50;
    else currentHeight = 90;
    
    setStartHeight(currentHeight);
  }, [panelState]);

  const handleTouchMove = useCallback((e) => {
    if (!isDragging) return;
    
    const currentY = e.touches[0].clientY;
    const diff = startY - currentY;
    const newHeight = Math.min(90, Math.max(10, startHeight + (diff / window.innerHeight) * 100));
    
    if (panelRef.current) {
      panelRef.current.style.transform = `translateY(${100 - newHeight}%)`;
    }
  }, [isDragging, startY, startHeight]);

  const handleTouchEnd = useCallback(() => {
    if (!isDragging) return;
    setIsDragging(false);
    
    if (panelRef.current) {
      const computedStyle = window.getComputedStyle(panelRef.current);
      const matrix = new DOMMatrixReadOnly(computedStyle.transform);
      const currentTranslateY = matrix.m42;
      const panelHeight = panelRef.current.offsetHeight;
      const visiblePercentage = (1 - currentTranslateY / panelHeight) * 100;
      
      if (visiblePercentage < 30) {
        setPanelState("collapsed");
      } else if (visiblePercentage < 70) {
        setPanelState("half");
      } else {
        setPanelState("full");
      }
      
      panelRef.current.style.transform = '';
    }
  }, [isDragging]);

  // Add event listeners for dragging
  useEffect(() => {
    const handle = dragHandleRef.current;
    if (!handle) return;

    handle.addEventListener('touchstart', handleTouchStart, { passive: true });
    handle.addEventListener('touchmove', handleTouchMove, { passive: true });
    handle.addEventListener('touchend', handleTouchEnd);

    return () => {
      handle.removeEventListener('touchstart', handleTouchStart);
      handle.removeEventListener('touchmove', handleTouchMove);
      handle.removeEventListener('touchend', handleTouchEnd);
    };
  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);

  const getPanelClass = () => {
    let baseClasses = "fixed md:relative bottom-0 left-0 right-0 md:h-full md:w-96 bg-gray-900 text-white p-6 shadow-2xl transform transition-transform duration-300 z-40 md:translate-x-0 rounded-t-2xl md:rounded-none";
    
    if (isDragging) {
      return `${baseClasses}`;
    }
    
    if (panelState === "collapsed") {
      return `${baseClasses} translate-y-[90%] md:translate-y-0 md:transform-none`;
    } else if (panelState === "half") {
      return `${baseClasses} translate-y-1/2 md:translate-y-0 md:transform-none`;
    } else if (panelState === "full") {
      return `${baseClasses} translate-y-0 md:translate-y-0 md:transform-none`;
    }
  };

  return (
    <div className="flex h-screen w-screen relative">
      {/* Map Container */}
      <MapContainer center={defaultPosition} zoom={13} className="h-full w-full z-0">
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution="&copy; OpenStreetMap contributors"
        />

        {/* Current location marker */}
        {currentLocation && (
          <Marker position={currentLocation} icon={currentLocationIcon}>
            <Popup>Your Current Location</Popup>
          </Marker>
        )}

        {/* Origin marker */}
        {origin && !currentLocation && (
          <Marker position={origin} icon={originIcon}>
            <Popup>Origin</Popup>
          </Marker>
        )}

        {/* Destination marker */}
        {destination && (
          <Marker position={destination} icon={destinationIcon}>
            <Popup>Destination</Popup>
          </Marker>
        )}

        {/* Route lines */}
        {jeepneyRoutes.map((route) => (
          <Polyline 
            key={route.name} 
            positions={route.coordinates} 
            color={route.color} 
            weight={3} 
            opacity={0.7}
          />
        ))}

        {/* Route result lines */}
        {routeResult && routeResult.map((leg, index) => (
          <Polyline
            key={index}
            positions={leg.path}
            color={leg.color}
            weight={6}
            opacity={0.9}
          />
        ))}

        <MapEvents setOrigin={setOrigin} setDestination={setDestination} mode={mode} />
        <RecenterMap position={origin || defaultPosition} />
      </MapContainer>

      {/* Floating Panel */}
      <div ref={panelRef} className={getPanelClass()}>
        {/* Panel Drag Handle */}
        <div 
          ref={dragHandleRef}
          className="flex justify-center md:hidden touch-none cursor-grab active:cursor-grabbing"
        >
          <div className="w-12 h-1.5 bg-gray-600 rounded-full my-2"></div>
        </div>

        {/* Panel Content */}
        <div className="flex flex-col h-full">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold">🚍 Jeepney Route Finder</h2>
            {(origin || destination) && (
              <button 
                onClick={handleClear}
                className="md:hidden p-1 rounded-full bg-gray-700 hover:bg-gray-600"
                aria-label="Clear"
              >
                <XMarkIcon className="w-5 h-5" />
              </button>
            )}
          </div>

          {!origin && !destination && (
            <div className="flex flex-col space-y-4">
              <p className="text-gray-300">Plan your jeepney route</p>
              
              <button
                onClick={getCurrentLocation}
                className="flex items-center justify-center space-x-2 bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                <ArrowPathIcon className="w-5 h-5" />
                <span>Use My Current Location</span>
              </button>
              
              <div className="relative flex items-center justify-center my-4">
                <div className="flex-grow border-t border-gray-700"></div>
                <span className="mx-4 text-gray-500 text-sm">OR</span>
                <div className="flex-grow border-t border-gray-700"></div>
              </div>
              
              <button
                onClick={() => setMode("origin")}
                className="flex items-center justify-center space-x-2 bg-gray-700 text-white py-3 rounded-lg font-medium hover:bg-gray-600 transition-colors"
              >
                <MapPinIcon className="w-5 h-5" />
                <span>Select Origin on Map</span>
              </button>

              {geoError && (
                <div className="mt-4 p-3 bg-red-900 rounded-lg">
                  <p className="text-red-200 text-sm">{geoError}</p>
                </div>
              )}
            </div>
          )}

          {origin && !destination && (
            <div className="flex flex-col space-y-4">
              <div className="bg-gray-800 p-4 rounded-lg">
                <p className="text-green-400 font-medium">✓ Origin set</p>
                <p className="text-sm text-gray-400 mt-1">
                  {currentLocation ? "Using your current location" : "Origin selected on map"}
                </p>
              </div>
              
              <button
                onClick={() => setMode("destination")}
                className="flex items-center justify-center space-x-2 bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                <MapPinIcon className="w-5 h-5" />
                <span>Select Destination on Map</span>
              </button>
            </div>
          )}

          {loading && (
            <div className="mt-4 py-6 text-center">
              <div className="inline-flex items-center justify-center space-x-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.4s'}}></div>
              </div>
              <p className="text-blue-400 font-medium mt-3">
                Finding best jeepney route...
              </p>
            </div>
          )}

          {routeResult && !loading && (
            <div className="mt-4 bg-gray-800 p-5 rounded-xl shadow-md">
              <h3 className="text-xl font-semibold mb-3">Recommended Route</h3>
              
              <div className="space-y-4">
                {routeResult.map((leg, index) => (
                  <div key={index} className="bg-gray-700 p-4 rounded-lg">
                    <div className="flex items-center space-x-3 mb-2">
                      <div className="w-6 h-6 rounded-full flex items-center justify-center text-white font-bold" style={{backgroundColor: leg.color}}>
                        {index + 1}
                      </div>
                      <div className="font-semibold">Jeepney {leg.route}</div>
                    </div>
                    <p className="text-sm text-gray-300">
                      Distance: <span className="font-semibold text-green-400">{leg.distance.toFixed(2)} km</span>
                    </p>
                  </div>
                ))}
              </div>
              
              <div className="mt-4 bg-gray-700 p-3 rounded-lg">
                <h4 className="font-medium text-gray-300 mb-2">Directions</h4>
                <ol className="list-decimal list-inside text-sm space-y-1 text-gray-300">
                  <li>Start from your {currentLocation ? "current location" : "selected origin"}</li>
                  {routeResult.length === 1 ? (
                    <li>Take Jeepney {routeResult[0].route} to your destination</li>
                  ) : (
                    <>
                      <li>Take Jeepney {routeResult[0].route} to the transfer point</li>
                      <li>Transfer to Jeepney {routeResult[1].route} to your destination</li>
                    </>
                  )}
                  <li>Alert the driver when you're near your destination</li>
                </ol>
              </div>
              
              <button
                className="w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors mt-4"
                onClick={handleClear}
              >
                Plan New Route
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Desktop toggle button */}
      <button 
        onClick={() => setPanelState(panelState === "collapsed" ? "half" : "collapsed")}
        className="hidden md:flex absolute top-4 right-4 bg-gray-900 text-white p-3 rounded-full shadow-lg z-30 hover:bg-gray-800 transition-colors"
        aria-label="Toggle panel"
      >
        <ChevronDownIcon className={`w-5 h-5 transform transition-transform ${panelState === "collapsed" ? "rotate-180" : ""}`} />
      </button>

      {/* Mode indicator */}
      <div className="absolute top-4 left-4 bg-gray-900 text-white px-4 py-2 rounded-lg shadow-lg z-30">
        {mode === "origin" ? "Select origin on map" : "Select destination on map"}
      </div>

      {/* Loading Overlay */}
      {loading && (
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
          <div className="flex flex-col items-center">
            <div className="w-16 h-16 border-4 border-blue-400 border-t-transparent rounded-full animate-spin"></div>
            <p className="text-white mt-4 text-lg font-medium">
              Finding best route...
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

export default Map;
